--// HawkUI Library
local HawkUI = {}

--// Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

--// Create ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "HawkUI"
screenGui.ResetOnSpawn = false
pcall(function()
    screenGui.Parent = game.CoreGui
end)

--// Styling helpers
local function roundify(obj, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 8)
    corner.Parent = obj
end

local function gradientify(obj)
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(0,0,0)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255,0,0))
    }
    gradient.Rotation = 45
    gradient.Parent = obj
end

local function makeFrame(name, size, parent)
    local frame = Instance.new("Frame")
    frame.Name = name
    frame.Size = size
    frame.BackgroundColor3 = Color3.fromRGB(20,20,20)
    frame.BorderSizePixel = 0
    roundify(frame, 8)
    gradientify(frame)
    frame.Parent = parent
    return frame
end

local function makeText(name, text, size, parent)
    local label = Instance.new("TextLabel")
    label.Name = name
    label.Text = text
    label.Size = size
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.fromRGB(255,255,255)
    label.TextScaled = true
    label.Font = Enum.Font.Gotham
    label.Parent = parent
    return label
end

local function makeButton(text, parent, callback)
    local btn = Instance.new("TextButton")
    btn.Text = text
    btn.Size = UDim2.new(1,0,0,30)
    btn.BackgroundColor3 = Color3.fromRGB(40,40,40)
    roundify(btn, 8)
    gradientify(btn)
    btn.TextColor3 = Color3.new(1,1,1)
    btn.Font = Enum.Font.Gotham
    btn.TextScaled = true
    btn.Parent = parent

    btn.MouseButton1Click:Connect(function()
        if callback then callback() end
    end)
    return btn
end

local function makeToggle(text, parent, callback)
    local toggleFrame = makeFrame(text.."Toggle", UDim2.new(1,0,0,30), parent)

    local checkmark = Instance.new("TextLabel")
    checkmark.Size = UDim2.new(0,30,1,0)
    checkmark.Text = "☐"
    checkmark.TextColor3 = Color3.fromRGB(255,255,255)
    checkmark.TextScaled = true
    checkmark.BackgroundTransparency = 1
    checkmark.Font = Enum.Font.Gotham
    checkmark.Parent = toggleFrame

    local label = makeText(text.."Label", text, UDim2.new(1,-30,1,0), toggleFrame)
    label.Position = UDim2.new(0,30,0,0)

    local state = false

    toggleFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            state = not state
            checkmark.Text = state and "✔" or "☐"
            if callback then callback(state) end
        end
    end)
end

local function makeDropdown(text, options, parent, callback)
    local dropFrame = makeFrame(text.."Dropdown", UDim2.new(1,0,0,30), parent)
    local selected = makeText("Selected", text.." ▼", UDim2.new(1,0,1,0), dropFrame)
    selected.TextXAlignment = Enum.TextXAlignment.Left
    local expanded = false

    local optionContainer = makeFrame("Options", UDim2.new(1,0,0,0), parent)
    optionContainer.ClipsDescendants = true
    optionContainer.Visible = false

    local function expand()
        expanded = not expanded
        optionContainer.Visible = expanded
        optionContainer.Size = UDim2.new(1,0,0, #options*30)
    end

    dropFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            expand()
        end
    end)

    for _,opt in ipairs(options) do
        local optBtn = makeButton(opt, optionContainer, function()
            selected.Text = opt.." ▼"
            optionContainer.Visible = false
            expanded = false
            if callback then callback(opt) end
        end)
    end
end

local function makeMultiDropdown(text, options, parent, callback)
    local frame = makeFrame(text.."MultiDropdown", UDim2.new(1,0,0,30), parent)
    local selectedLabel = makeText("Selected", text.." ▼", UDim2.new(1,0,1,0), frame)
    selectedLabel.TextXAlignment = Enum.TextXAlignment.Left
    local expanded = false
    local selected = {}

    local container = makeFrame("Options", UDim2.new(1,0,0,0), parent)
    container.ClipsDescendants = true
    container.Visible = false

    local function refreshLabel()
        if #selected == 0 then
            selectedLabel.Text = text.." ▼"
        else
            selectedLabel.Text = table.concat(selected, ", ").." ▼"
        end
    end

    local function expand()
        expanded = not expanded
        container.Visible = expanded
        container.Size = UDim2.new(1,0,0, #options*30)
    end

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            expand()
        end
    end)

    for _,opt in ipairs(options) do
        local optFrame = makeFrame(opt.."Opt", UDim2.new(1,0,0,30), container)
        local check = Instance.new("TextLabel")
        check.Size = UDim2.new(0,30,1,0)
        check.Text = "☐"
        check.TextScaled = true
        check.Font = Enum.Font.Gotham
        check.TextColor3 = Color3.new(1,1,1)
        check.BackgroundTransparency = 1
        check.Parent = optFrame

        local lbl = makeText(opt, opt, UDim2.new(1,-30,1,0), optFrame)
        lbl.Position = UDim2.new(0,30,0,0)

        optFrame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                if table.find(selected, opt) then
                    table.remove(selected, table.find(selected, opt))
                    check.Text = "☐"
                else
                    table.insert(selected, opt)
                    check.Text = "✔"
                end
                refreshLabel()
                if callback then callback(selected) end
            end
        end)
    end
end

local function makeTextbox(placeholder, parent, callback)
    local box = Instance.new("TextBox")
    box.Size = UDim2.new(1,0,0,30)
    box.PlaceholderText = placeholder
    box.Text = ""
    box.BackgroundColor3 = Color3.fromRGB(40,40,40)
    roundify(box,8)
    gradientify(box)
    box.TextColor3 = Color3.fromRGB(255,255,255)
    box.Font = Enum.Font.Gotham
    box.TextScaled = true
    box.Parent = parent

    box.FocusLost:Connect(function()
        if callback then callback(box.Text) end
    end)
end

local function makeSlider(text, min, max, parent, callback)
    local sliderFrame = makeFrame(text.."Slider", UDim2.new(1,0,0,50), parent)
    local label = makeText("SliderLabel", text..": "..min, UDim2.new(1,0,0.4,0), sliderFrame)
    label.TextYAlignment = Enum.TextYAlignment.Top

    local bar = makeFrame("Bar", UDim2.new(1,-20,0,10), sliderFrame)
    bar.Position = UDim2.new(0,10,0.6,0)
    bar.BackgroundColor3 = Color3.fromRGB(50,50,50)

    local fill = Instance.new("Frame")
    fill.Size = UDim2.new(0,0,1,0)
    fill.BackgroundColor3 = Color3.fromRGB(255,0,0)
    roundify(fill,8)
    fill.Parent = bar

    local dragging = false

    bar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local rel = (input.Position.X - bar.AbsolutePosition.X) / bar.AbsoluteSize.X
            rel = math.clamp(rel,0,1)
            fill.Size = UDim2.new(rel,0,1,0)
            local val = math.floor(min + (max-min)*rel)
            label.Text = text..": "..val
            if callback then callback(val) end
        end
    end)
end

local function makeLabel(title, description, parent)
    local frame = makeFrame(title.."Label", UDim2.new(1,0,0,50), parent)
    local titleLbl = makeText("Title", title, UDim2.new(1,0,0.5,0), frame)
    titleLbl.TextYAlignment = Enum.TextYAlignment.Top
    local descLbl = makeText("Description", description, UDim2.new(1,0,0.5,0), frame)
    descLbl.Position = UDim2.new(0,0,0.5,0)
    descLbl.TextColor3 = Color3.fromRGB(200,200,200)
end

--// Public
function HawkUI:CreateWindow(name)
    local main = makeFrame(name.."Main", UDim2.new(0,300,0,400), screenGui)
    main.Position = UDim2.new(0.5,-150,0.5,-200)
    main.AnchorPoint = Vector2.new(0.5,0.5)

    local layout = Instance.new("UIListLayout", main)
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding = UDim.new(0,5)

    local tab = {}

    function tab:AddButton(text,callback) makeButton(text, main, callback) end
    function tab:AddToggle(text,callback) makeToggle(text, main, callback) end
    function tab:AddDropdown(text, options, callback) makeDropdown(text, options, main, callback) end
    function tab:AddMultiDropdown(text, options, callback) makeMultiDropdown(text, options, main, callback) end
    function tab:AddTextbox(placeholder,callback) makeTextbox(placeholder, main, callback) end
    function tab:AddSlider(text,min,max,callback) makeSlider(text,min,max,main,callback) end
    function tab:AddLabel(title,description) makeLabel(title,description,main) end

    return tab
end

return HawkUI
